{"version":3,"sources":["../src/index.js"],"names":["createRemoteSchema","uri","link","HttpLink","fetch","schema","console","log","WEATHER_API","remoteWeatherAPI","MY_API","myRemoteAPI","myTransformedAPI","FilterRootFields","operation","rootField","RenameTypes","name","RenameRootFields","linkTypeDefs","schemas","resolvers","Venue","location","fragment","resolve","response","args","context","info","mergeInfo","delegateToSchema","fieldName","place","city","country","transforms","server","ApolloServer","listen","then","url","run","e"],"mappings":";;AAoBA;;qEACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;;;AAGQA,8BANR;AAAA,kFAM6B,iBAAOC,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnBC,4BAFmB,GAEZ,IAAIC,wBAAJ,CAAa,EAACF,KAAKA,GAAN,EAAWG,0BAAX,EAAb,CAFY;AAGzB;AACA;;AAJyB;AAAA,+BAKJ,oCAAiBF,IAAjB,CALI;;AAAA;AAKnBG,+BALmB;AAAA,yDAMlB,8CAA2B;AAChCA,yCADgC;AAEhCH;AAFgC,yBAA3B,CANkB;;AAAA;AAAA;AAAA;;AAWzBI,gCAAQC,GAAR;;AAXyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAN7B;;AAAA,8BAMQP,kBANR;AAAA;AAAA;AAAA;;AAqBA;;;AArBA;AAAA,mBAsB+BA,mBAAmBQ,WAAnB,CAtB/B;;AAAA;AAsBMC,4BAtBN;AAAA;AAAA,mBAuB0BT,mBAAmBU,MAAnB,CAvB1B;;AAAA;AAuBMC,uBAvBN;;;AAyBA;;;AAGMC,4BA5BN,GA4ByB,mCAAgBD,WAAhB,EAA6B,CACpD,IAAIE,8BAAJ,CACE,UAACC,SAAD,EAAYC,SAAZ;AAAA,qBAA0BD,cAAc,OAAxC;AAAA,aADF,CADoD,EAIpD,IAAIE,yBAAJ,CAAgB,UAACC,IAAD;AAAA,qBACdA,SAAS,UAAT,aAA8BA,IAA9B,GAAuCA,IADzB;AAAA,aAAhB,CAJoD,EAMpD,IAAIC,8BAAJ,CAAqB,UAACJ,SAAD,EAAYG,IAAZ;AAAA,qBACnBA,SAAS,UAAT,aAA8BA,IAA9B,GAAuCA,IADpB;AAAA,aAArB,CANoD,CAA7B,CA5BzB;;AAsCA;;;AAEME,wBAxCN;;AA8CA;;;AAEMd,kBAhDN,GAgDe,gCAAa;;AAExB;AACAe,uBAAS,CACPX,gBADO,EAEPG,gBAFO,EAGPO,YAHO,CAHe;;AASxB;AACAE,yBAAW;;AAGT;AACAC,uBAAO;;AAEL;AACAC,4BAAU;;AAER;AACAC,8DAHQ;AAIRC,2BAJQ,mBAIAC,QAJA,EAIUC,IAJV,EAIgBC,OAJhB,EAIyBC,IAJzB,EAI+B;AACrC,6BAAOA,KAAKC,SAAL,CAAeC,gBAAf,CAAgC;;AAErC;AACA1B,gCAAQI,gBAH6B;;AAKrC;AACAK,mCAAW,OAN0B;;AAQrC;AACAkB,mCAAW,UAT0B;;AAWrC;AACA;AACAL,8BAAM;AACJM,iCAAUP,SAASQ,IAAnB,UAA4BR,SAASS;AADjC,yBAb+B;AAgBrCP,wCAhBqC;AAiBrCC,kCAjBqC;AAkBrCO,oCAAYxB,iBAAiBwB;AAlBQ,uBAAhC,CAAP;AAoBD;AAzBO;AAHL;;AAJE;AAVa,aAAb,CAhDf;;AAiGA;;AACMC,kBAlGN,GAkGe,IAAIC,0BAAJ,CAAiB,EAAEjC,cAAF,EAAjB,CAlGf;;AAmGEgC,mBAAOE,MAAP,GAAgBC,IAAhB,CAAqB,iBAAa;AAAA,kBAAVC,GAAU,SAAVA,GAAU;;AAClCnC,sBAAQC,GAAR,oCAAmCkC,GAAnC;AACD,aAFC;;AAnGF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,G;;;;;AArBf;;AACA;;AACA;;AASA;;;;;;;;AAEA;AACA,IAAMlC,cACJ,0BADF;AAEA,IAAME,SACJ,qEADF;;AA8GA,IAAI;AACFJ,UAAQC,GAAR,CAAY,WAAZ;AACAmC;AACD,CAHD,CAGG,OAAOC,CAAP,EAAU;AACXrC,UAAQC,GAAR,CAAYoC,CAAZ;AACD","file":"index.js","sourcesContent":["import { ApolloServer } from 'apollo-server';\nimport { HttpLink } from 'apollo-link-http';\nimport {\n    makeRemoteExecutableSchema,\n    mergeSchemas,\n    transformSchema,\n    FilterRootFields,\n    RenameTypes,\n    RenameRootFields,\n    introspectSchema\n  } from 'graphql-tools';\nimport fetch from 'node-fetch';\n\n// Our APIs\nconst WEATHER_API =\n  'https://geocodeql.now.sh';\nconst MY_API =\n  'https://api-euwest.graphcms.com/v1/cjo9rdfea63cx01dgfkqtrcad/master'\n\n\n// Server Function\nasync function run(){\n\n\n/* First we need to fetch our remote APIs,\ninspect their content and then apply the use\nApollo to merge their schemas. */\n  const createRemoteSchema = async (uri) => {\n  try {\n    const link = new HttpLink({uri: uri, fetch});\n    // Introspection is what gives us\n    //the self documenting magic of GraphQL\n    const schema = await introspectSchema(link);\n    return makeRemoteExecutableSchema({\n      schema,\n      link,\n    });\n  } catch (error) {\n    console.log(error)\n  }\n};\n\n// Process the APIs\nconst remoteWeatherAPI = await createRemoteSchema(WEATHER_API)\nconst myRemoteAPI = await createRemoteSchema(MY_API)\n\n/* Here I rename some more collisions around the name 'location'\n- but I also remove all non query operations just to keep things\ncleaner. We see those from our GraphCMS API. */\nconst myTransformedAPI = transformSchema(myRemoteAPI, [\n  new FilterRootFields(\n    (operation, rootField) => operation === 'Query'\n  ),\n  new RenameTypes((name) =>\n    name === 'Location' ? `GCMS_${name}` : name),\n  new RenameRootFields((operation, name) =>\n    name === 'location' ? `GCMS_${name}` : name),\n]);\n\n/* This is an important step, it lets us tell the schema\nwhich fields should be connected between the schemas. */\nconst linkTypeDefs = `\n  extend type Venue {\n    location: Location\n  }\n`;\n\n/* Finally we merge the schemas but also add the resolvers\nwhich tells GraphQL how to resolve our newly added fields. */\nconst schema = mergeSchemas({\n\n    // Merge these Schemas\n    schemas: [\n      remoteWeatherAPI,\n      myTransformedAPI,\n      linkTypeDefs,\n    ],\n\n    // Resolve them here\n    resolvers: {\n\n      \n      // Which type gets the new fields\n      Venue: {\n        \n        // Which field\n        location: {\n          \n          // What's the 'value' we will pass in from our existing Schema\n          fragment: `... on Venue { city, country }`,\n          resolve(response, args, context, info) {\n            return info.mergeInfo.delegateToSchema({\n              \n              // Which Schema returns the data for the field above\n              schema: remoteWeatherAPI,\n              \n              // What's the operation it should perform \n              operation: 'query',\n              \n              // What field is is querying ON the delegated Schema?\n              fieldName: 'location',\n              \n              // What arguments do we pass in -\n              // from our query above which is a JSON response?\n              args: {\n                place: `${response.city}, ${response.country}`,\n              },\n              context,\n              info,\n              transforms: myTransformedAPI.transforms\n            });\n          },\n        }\n      }\n    \n    }\n  });\n\n// Server Code - the end.\nconst server = new ApolloServer({ schema });\n  server.listen().then(({ url }) => {\n  console.log(`ðŸš€  Server ready at ${url}`);\n});\n\n}\n\ntry {\n  console.log('get ready')\n  run()\n}  catch (e) {\n  console.log(e)\n}\n  "]}